name: Build and Deploy to GKE

on: 
  push:
    branches: [ "main" ]

env:
  # Update secrets in repo settings
  APP_NAME: express-app
  IMAGE_TAG: latest
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  ZONE: ${{ secrets.GCP_ZONE }}
  REGION: ${{ secrets.GCP_REGION }}

permissions:
  contents: 'read' # needed for checkout
  id-token: 'write' # required to mint OIDC tokens

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v4
      # Service account key is stored in GitHub Secrets as GCP_SA_KEY and updated in the repo settings
      - name: Authenticate to GCP using workload identity federation
        uses: google-github-actions/auth@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }} 
          service_account: "github-ci-cd@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"

      # Install gcloud CLI
      - name: Set up gloud
        uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Test (whoami / list)
        run: |
          gcloud auth list
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud porjects describe ${{ secrets.GCP_PROJECT_ID }} --format="value(projectNumber)" 
        # Quick API call to verify token works
      - name: Configure Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet
        
      # Build Docker image
      - name: Build Docker image
        run: |
          IMAGE="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Get kubeconfig
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Deploy Helm chart
        run: |
          helm upgrade --install ${{ env.APP_NAME }} ./helm/express-app \
            --set image.repository=${{ env.IMAGE }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            
  